import asyncio
import logging
import sqlite3
import sys
from datetime import datetime
from io import StringIO

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.exceptions import TelegramBadRequest

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from config import BOT_TOKEN, MESSAGES
from supabase_database import initialize_database
from keyboards import (
    get_main_menu, get_back_to_menu, get_calendar, 
    get_history_keyboard, get_operations_keyboard,
    get_amount_confirmation_keyboard, get_export_keyboard,
    get_operations_list_keyboard, get_delete_confirmation_keyboard, 
    get_invoice_selection_keyboard
)
from utils import (
    parse_amount_from_text, extract_car_info, validate_amount,
    format_balance, format_date, parse_date_from_callback,
    format_operation_summary, format_single_operation_summary, 
    sanitize_filename
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = None


# –°—Ç–∞–Ω–∏ –¥–ª—è FSM (Finite State Machine)
class BotStates(StatesGroup):
    waiting_for_invoice_text = State()
    waiting_for_payment_amount = State()
    waiting_for_payment_date = State()
    waiting_for_payment_invoice_selection = State()
    deleting_operations = State()


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        await message.answer(
            MESSAGES['start'],
            reply_markup=get_main_menu()
        )
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_start: {e}")
        await message.answer(MESSAGES['error'])


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        await callback.message.edit_text(
            MESSAGES['start'],
            reply_markup=get_main_menu()
        )
        await callback.answer()
    except TelegramBadRequest:
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ
        await callback.message.answer(
            MESSAGES['start'],
            reply_markup=get_main_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ back_to_menu: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É
@dp.callback_query(F.data == "menu_add_invoice")
async def add_invoice_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É"""
    try:
        await state.set_state(BotStates.waiting_for_invoice_text)
        await callback.message.edit_text(
            MESSAGES['add_invoice'],
            reply_markup=get_back_to_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ add_invoice_start: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É —Ä–∞—Ö—É–Ω–∫—É
@dp.message(StateFilter(BotStates.waiting_for_invoice_text))
async def process_invoice_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–∞—Ö—É–Ω–∫–æ–º"""
    try:
        text = message.text
        
        # –ü–∞—Ä—Å–∏–º–æ —Å—É–º—É –∑ —Ç–µ–∫—Å—Ç—É
        amount = parse_amount_from_text(text)
        
        if amount is None:
            await message.answer(
                MESSAGES['no_amount_found'],
                reply_markup=get_back_to_menu()
            )
            return
        
        # –í–∏—Ç—è–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ
        car_info = extract_car_info(text)
        
        # –î–æ–¥–∞—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        success = db.add_invoice(
            user_id=message.from_user.id,
            car_info=car_info,
            amount=amount,
            original_text=text
        )
        
        if success:
            await state.clear()
            balance = db.get_balance(message.from_user.id)
            
            response = f"{MESSAGES['invoice_added']}\n\n"
            response += f"üöó –ê–≤—Ç–æ: {car_info}\n"
            response += f"üí∞ –°—É–º–∞: {amount:.2f} ‚Ç¨\n\n"
            response += f"üìä –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:\n{format_balance(balance)}"
            
            await message.answer(
                response,
                reply_markup=get_main_menu()
            )
        else:
            await message.answer(
                MESSAGES['error'],
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_invoice_text: {e}")
        await message.answer(
            MESSAGES['error'],
            reply_markup=get_main_menu()
        )
        await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
@dp.callback_query(F.data == "menu_add_payment")
async def add_payment_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É - –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏"""
    try:
        await state.set_state(BotStates.waiting_for_payment_amount)
        await callback.message.edit_text(
            MESSAGES['add_payment'],
            reply_markup=get_back_to_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ add_payment_start: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å—É–º–∏ –ø–ª–∞—Ç–µ–∂—É
@dp.message(StateFilter(BotStates.waiting_for_payment_amount))
async def process_payment_amount(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å—É–º–∏ –ø–ª–∞—Ç–µ–∂—É - –ø–æ–∫–∞–∑—É—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä"""
    try:
        is_valid, amount = validate_amount(message.text)
        
        if not is_valid:
            await message.answer(
                MESSAGES['invalid_amount'],
                reply_markup=get_back_to_menu()
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—É–º—É –≤ —Å—Ç–∞–Ω
        await state.update_data(payment_amount=amount)
        await state.set_state(BotStates.waiting_for_payment_date)
        
        await message.answer(
            f"‚úÖ –°—É–º–∞: {amount:.2f} ‚Ç¨\n\nüìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂—É:",
            reply_markup=get_calendar()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_payment_amount: {e}")
        await message.answer(
            MESSAGES['error'],
            reply_markup=get_main_menu()
        )
        await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query(F.data.startswith("calendar_"))
async def calendar_navigation(callback: CallbackQuery):
    """–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    try:
        data = callback.data
        
        if data.startswith("calendar_prev_"):
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å
            _, _, year, month = data.split('_')
            await callback.message.edit_reply_markup(
                reply_markup=get_calendar(int(year), int(month))
            )
        elif data.startswith("calendar_next_"):
            # –ù–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å
            _, _, year, month = data.split('_')
            await callback.message.edit_reply_markup(
                reply_markup=get_calendar(int(year), int(month))
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ calendar_navigation: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
@dp.callback_query(F.data.startswith("date_selected_"))
async def date_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –ø–ª–∞—Ç–µ–∂—É - –ø–æ–∫–∞–∑—É—î–º–æ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤"""
    try:
        # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –∑ callback_data
        selected_date = parse_date_from_callback(callback.data)
        
        if not selected_date:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
        state_data = await state.get_data()
        payment_amount = state_data.get('payment_amount')
        
        if not payment_amount:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –≤—Ç—Ä–∞—á–µ–Ω–æ —Å—É–º—É –ø–ª–∞—Ç–µ–∂—É")
            await state.clear()
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        recent_invoices = db.get_recent_invoices(callback.from_user.id, limit=5)
        
        response = f"üí∞ –°—É–º–∞: {payment_amount:.2f} ‚Ç¨\nüìÖ –î–∞—Ç–∞: {selected_date}\n\n"
        if recent_invoices:
            response += "üìÑ –û–±–µ—Ä—ñ—Ç—å —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞ –±–∞–ª–∞–Ω—Å':\n\n"
            response += "üïê –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä–∞—Ö—É–Ω–∫—ñ–≤:"
        else:
            response += "üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î —Ä–∞—Ö—É–Ω–∫—ñ–≤.\n–ú–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ –Ω–∞ –±–∞–ª–∞–Ω—Å:"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É —ñ —Å—É–º—É –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        await state.update_data(payment_date=selected_date, final_amount=payment_amount)
        await state.set_state(BotStates.waiting_for_payment_invoice_selection)
        
        await callback.message.edit_text(
            response,
            reply_markup=get_invoice_selection_keyboard(recent_invoices)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ date_selected: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")
        await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–∞—Ö—É–Ω–∫—É –∞–±–æ "–Ω–∞ –±–∞–ª–∞–Ω—Å"
@dp.callback_query(F.data.startswith("select_invoice_"))
async def invoice_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ - –≤—ñ–¥—Ä–∞–∑—É —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–∞—Ç—ñ–∂"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
        state_data = await state.get_data()
        payment_date = state_data.get('payment_date')
        final_amount = state_data.get('final_amount')
        
        if not payment_date or not final_amount:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –≤—Ç—Ä–∞—á–µ–Ω–æ –¥–∞–Ω—ñ –ø–ª–∞—Ç–µ–∂—É")
            await state.clear()
            return
        
        # –ü–∞—Ä—Å–∏–º–æ ID —Ä–∞—Ö—É–Ω–∫—É –∑ callback_data
        callback_parts = callback.data.split('_')
        
        if callback_parts[2] == "balance":
            # –ü–ª–∞—Ç—ñ–∂ –Ω–∞ –±–∞–ª–∞–Ω—Å
            success = db.add_payment(
                user_id=callback.from_user.id,
                amount=final_amount,
                date_paid=payment_date
            )
            payment_description = "–Ω–∞ –±–∞–ª–∞–Ω—Å"
        else:
            # –ü–ª–∞—Ç—ñ–∂ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
            invoice_id = int(callback_parts[2])
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            recent_invoices = db.get_recent_invoices(callback.from_user.id, limit=5)
            selected_invoice = next((inv for inv in recent_invoices if inv['id'] == invoice_id), None)
            
            if not selected_invoice:
                await callback.answer("–†–∞—Ö—É–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            success = db.add_payment_for_invoice(
                user_id=callback.from_user.id,
                invoice_id=invoice_id,
                amount=final_amount,
                date_paid=payment_date
            )
            payment_description = f"–∑–∞ —Ä–∞—Ö—É–Ω–æ–∫: {selected_invoice['car_info']}"
        
        if success:
            await state.clear()
            balance = db.get_balance(callback.from_user.id)
            
            response = f"‚úÖ –ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
            response += f"üí∞ –°—É–º–∞: {final_amount:.2f} ‚Ç¨\n"
            response += f"üìÖ –î–∞—Ç–∞: {payment_date}\n"
            response += f"üìÑ –¢–∏–ø: –ü–ª–∞—Ç—ñ–∂ {payment_description}\n\n"
            response += f"üìä –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:\n{format_balance(balance)}"
            
            await callback.message.edit_text(
                response,
                reply_markup=get_main_menu()
            )
        else:
            await callback.message.edit_text(
                MESSAGES['error'],
                reply_markup=get_main_menu()
            )
            await state.clear()
            
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ invoice_selected: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")
        await state.clear()





# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–∞–ª–∞–Ω—Å—É
@dp.callback_query(F.data == "menu_balance")
async def show_balance(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É"""
    try:
        balance = db.get_balance(callback.from_user.id)
        
        response = f"{MESSAGES['balance']}\n\n"
        response += format_balance(balance)
        
        await callback.message.edit_text(
            response,
            reply_markup=get_operations_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_balance: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó
@dp.callback_query(F.data == "menu_history")
async def show_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —ñ—Å—Ç–æ—Ä—ñ—ó –æ–ø–µ—Ä–∞—Ü—ñ–π"""
    try:
        user_id = callback.from_user.id
        history = db.get_history(user_id)
        current_balance = db.get_balance(user_id)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–≥—ñ–¥–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        response = "üè† VA BROTHERS BALANCE\n\n"
        
        if not history:
            balance_emoji = "‚ö™" if current_balance == 0 else ("üü¢" if current_balance > 0 else "üî¥")
            response += f"–ù–µ–º–∞—î –æ–ø–µ—Ä–∞—Ü—ñ–π\n\nüí∞ –ü–Ü–î–°–£–ú–û–ö: {balance_emoji} {current_balance:.2f} ‚Ç¨"
        else:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫–æ–∂–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
            for operation in history[:15]:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 15 –æ–ø–µ—Ä–∞—Ü—ñ–π
                operation_text = format_operation_summary(operation)
                response += operation_text + "\n\n"
            
            # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –∑–≥—ñ–¥–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            balance_emoji = "‚ö™" if current_balance == 0 else ("üü¢" if current_balance > 0 else "üî¥")
            if current_balance < 0:
                response += f"üí∞ –ü–Ü–î–°–£–ú–û–ö: {balance_emoji} {current_balance:.2f} ‚Ç¨"
            else:
                response += f"üí∞ –ü–Ü–î–°–£–ú–û–ö: {balance_emoji} +{current_balance:.2f} ‚Ç¨"
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if len(response) > 4000:
            response = response[:4000] + "...\n\nüí∞ –ü–Ü–î–°–£–ú–û–ö: ‚Ç¨" + str(current_balance)
        
        await callback.message.edit_text(
            response,
            reply_markup=get_back_to_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_history: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –æ–ø–µ—Ä–∞—Ü—ñ–π")




# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
@dp.callback_query(F.data == "menu_export")
async def export_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –µ–∫—Å–ø–æ—Ä—Ç—É"""
    try:
        await callback.message.edit_text(
            "üì§ –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É:",
            reply_markup=get_export_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ export_menu: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
@dp.callback_query(F.data == "export_text")
async def export_text(callback: CallbackQuery):
    """–ï–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó –≤ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        export_data = db.export_history(callback.from_user.id)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª
        filename = f"car_payments_export_{callback.from_user.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        filename = sanitize_filename(filename)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(export_data)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        document = FSInputFile(filename)
        await callback.message.answer_document(
            document,
            caption="üìã –ï–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó –æ–ø–µ—Ä–∞—Ü—ñ–π"
        )
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        import os
        os.remove(filename)
        
        await callback.message.edit_text(
            "‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
            reply_markup=get_main_menu()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ export_text: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –º–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
@dp.callback_query(F.data == "delete_operations_menu")
async def delete_operations_menu(callback: CallbackQuery, state: FSMContext):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    try:
        await state.set_state(BotStates.deleting_operations)
        user_id = callback.from_user.id
        operations, total_count, total_pages = db.get_paginated_history(user_id, page=1, per_page=5)
        
        if not operations:
            await callback.message.edit_text(
                "üìã –ù–µ–º–∞—î –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
        
        await state.update_data(delete_page=1)
        
        text = f"üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n"
        for i, op in enumerate(operations, 1):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            summary = format_single_operation_summary(op)
            text += f"{i}. {summary}\n\n"
        
        if total_pages > 1:
            text += f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ 1/{total_pages}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_operations_list_keyboard(operations, 1, total_pages)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ delete_operations_menu: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")




# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@dp.callback_query(F.data.startswith("delete_page_"))
async def delete_page_navigation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    try:
        page = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        operations, total_count, total_pages = db.get_paginated_history(user_id, page=page, per_page=5)
        
        if not operations:
            await callback.answer("–ù–µ–º–∞—î –æ–ø–µ—Ä–∞—Ü—ñ–π –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
            return
        
        await state.update_data(delete_page=page)
        
        text = f"üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n"
        for i, op in enumerate(operations, 1):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            summary = format_single_operation_summary(op)
            text += f"{i}. {summary}\n\n"
        
        if total_pages > 1:
            text += f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{total_pages}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_operations_list_keyboard(operations, page, total_pages)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ delete_page_navigation: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@dp.callback_query(F.data.startswith("delete_invoice_") | F.data.startswith("delete_payment_"))
async def select_operation_for_deletion(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    try:
        parts = callback.data.split("_")
        operation_type = parts[1]  # 'invoice' –∞–±–æ 'payment'
        operation_id = int(parts[2])
        user_id = callback.from_user.id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ Supabase
        if operation_type == 'invoice':
            result_data = db.supabase.table('invoices')\
                .select('car_info, amount, date_created, original_text')\
                .eq('id', operation_id)\
                .eq('user_id', user_id)\
                .execute()
        else:  # payment
            result_data = db.supabase.table('payments')\
                .select('amount, date_paid, date_created')\
                .eq('id', operation_id)\
                .eq('user_id', user_id)\
                .execute()
        
        result = result_data.data[0] if result_data.data else None
        
        if not result:
            await callback.answer("–û–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if operation_type == 'invoice':
            text = f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫?\n\n"
            text += f"üìÑ –¢–∏–ø: –†–∞—Ö—É–Ω–æ–∫\n"
            text += f"üöó –ê–≤—Ç–æ: {result['car_info']}\n"
            text += f"üí∞ –°—É–º–∞: {float(result['amount']):.2f}‚Ç¨\n"
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            created_date = result['date_created'][:10] if result['date_created'] else '–ù–µ–≤—ñ–¥–æ–º–æ'
            text += f"üïê –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_date}\n"
            if result.get('original_text'):
                preview = result['original_text'][:100] + "..." if len(result['original_text']) > 100 else result['original_text']
                text += f"üìù –¢–µ–∫—Å—Ç: {preview}\n"
        else:  # payment
            text = f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂?\n\n"
            text += f"üí≥ –¢–∏–ø: –ü–ª–∞—Ç—ñ–∂\n"
            text += f"üí∞ –°—É–º–∞: {float(result['amount']):.2f}‚Ç¨\n"
            text += f"üìÖ –î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É: {result.get('date_paid', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            created_date = result['date_created'][:10] if result['date_created'] else '–ù–µ–≤—ñ–¥–æ–º–æ'
            text += f"üïê –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_date}\n"
        
        text += f"\n‚ö†Ô∏è –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_delete_confirmation_keyboard(operation_type, operation_id)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ select_operation_for_deletion: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_operation(callback: CallbackQuery, state: FSMContext):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    try:
        parts = callback.data.split("_")
        operation_type = parts[2]  # 'invoice' –∞–±–æ 'payment'
        operation_id = int(parts[3])
        user_id = callback.from_user.id
        
        # –í–∏–¥–∞–ª—è—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
        if operation_type == 'invoice':
            success = db.delete_invoice_by_id(user_id, operation_id)
            op_name = "—Ä–∞—Ö—É–Ω–æ–∫"
        else:  # payment
            success = db.delete_payment_by_id(user_id, operation_id)
            op_name = "–ø–ª–∞—Ç—ñ–∂"
        
        if success:
            balance = db.get_balance(user_id)
            
            text = f"‚úÖ {op_name.capitalize()} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!\n\n"
            text += f"üìä –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:\n{format_balance(balance)}"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_main_menu()
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {op_name}",
                reply_markup=get_main_menu()
            )
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ confirm_delete_operation: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è callback'—ñ–≤
@dp.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def unknown_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    current_state = await state.get_state()
    
    # –Ø–∫—â–æ –±–æ—Ç –æ—á—ñ–∫—É—î –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–∞—Ö—É–Ω–∫—É –∞–±–æ —Å—É–º–∏, –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
    if current_state in [BotStates.waiting_for_invoice_text, BotStates.waiting_for_payment_amount]:
        return
    
    await message.answer(
        "‚ùì –ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_menu()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback'—ñ–≤
@dp.callback_query()
async def unknown_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback'—ñ–≤"""
    await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback: {callback.data}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    global db
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db = initialize_database()
        logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –í–∏–¥–∞–ª—è—î–º–æ webhook (—è–∫—â–æ –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π)
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}") 