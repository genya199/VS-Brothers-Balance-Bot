import re
import logging
from typing import Optional, Tuple
from datetime import datetime
from config import DATE_FORMAT

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


def parse_amount_from_text(text: str) -> Optional[float]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–∏ –∑ —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    
    –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:
    - "= 740 —î–≤—Ä–æ"
    - "–∫–æ–º–ø–ª–µ–∫—Å 700 —î–≤—Ä–æ"
    - "740 euro"
    - "740EUR"
    - "‚Ç¨740"
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É
        
    Returns:
        Optional[float]: –ó–Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–∞ –∞–±–æ None
    """
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç (–ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏, –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É)
    normalized_text = re.sub(r'\s+', ' ', text.strip())
    
    # –†—ñ–∑–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É —Å—É–º
    patterns = [
        # –§–æ—Ä–º–∞—Ç "= 740 —î–≤—Ä–æ"
        r'=\s*(\d+(?:[,.]?\d+)?)\s*(?:—î–≤—Ä–æ|euro|eur|‚Ç¨)',
        
        # –§–æ—Ä–º–∞—Ç "–∫–æ–º–ø–ª–µ–∫—Å 700 —î–≤—Ä–æ"
        r'–∫–æ–º–ø–ª–µ–∫—Å\s+(\d+(?:[,.]?\d+)?)\s*(?:—î–≤—Ä–æ|euro|eur|‚Ç¨)',
        
        # –§–æ—Ä–º–∞—Ç "–¥–æ —Å–ø–ª–∞—Ç–∏ 740 —î–≤—Ä–æ"
        r'–¥–æ\s+—Å–ø–ª–∞—Ç–∏\s+(\d+(?:[,.]?\d+)?)\s*(?:—î–≤—Ä–æ|euro|eur|‚Ç¨)',
        
        # –§–æ—Ä–º–∞—Ç "—Å–ø–ª–∞—Ç–∏ 740 —î–≤—Ä–æ"
        r'—Å–ø–ª–∞—Ç–∏\s+(\d+(?:[,.]?\d+)?)\s*(?:—î–≤—Ä–æ|euro|eur|‚Ç¨)',
        
        # –§–æ—Ä–º–∞—Ç "740 —î–≤—Ä–æ"
        r'(\d+(?:[,.]?\d+)?)\s*(?:—î–≤—Ä–æ|euro|eur|‚Ç¨)',
        
        # –§–æ—Ä–º–∞—Ç "‚Ç¨740"
        r'‚Ç¨\s*(\d+(?:[,.]?\d+)?)',
        
        # –§–æ—Ä–º–∞—Ç "740EUR"
        r'(\d+(?:[,.]?\d+)?)(?:EUR|eur)',
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ —á–∏—Å–ª–æ–º —Ç–∞ –≤–∞–ª—é—Ç–æ—é
        r'(\d+(?:[,.]?\d+)?)\s*(?:—î–≤—Ä–æ|euro|eur|‚Ç¨|\$|usd)',
    ]
    
    # –ü—Ä–æ–±—É—î–º–æ –∫–æ–∂–µ–Ω –ø–∞—Ç–µ—Ä–Ω
    for pattern in patterns:
        matches = re.findall(pattern, normalized_text, re.IGNORECASE)
        if matches:
            try:
                # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∑–Ω–∞–π–¥–µ–Ω—É —Å—É–º—É (–∑–∞–∑–≤–∏—á–∞–π —Ü–µ –ø—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—É–º–∞)
                amount_str = matches[-1]
                # –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
                amount_str = amount_str.replace(',', '.')
                amount = float(amount_str)
                
                if amount > 0:
                    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å—É–º—É: {amount} —É —Ç–µ–∫—Å—Ç—ñ: {text[:50]}...")
                    return amount
                    
            except ValueError:
                continue
    
    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—É–º—É —É —Ç–µ–∫—Å—Ç—ñ: {text[:50]}...")
    return None


def extract_car_info(text: str) -> str:
    """
    –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ —Ç–µ–∫—Å—Ç—É
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
    Returns:
        str: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
    """
    # –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–≤—Ç–æ
    car_patterns = [
        # –§–æ—Ä–º–∞—Ç "2018TESLA MODEL S 5YJSA1E22JF272459"
        r'(\d{4}[A-Z\s]+(?:MODEL\s+)?[A-Z0-9\s]+[A-Z0-9]{17})',
        
        # VIN –∫–æ–¥ (17 —Å–∏–º–≤–æ–ª—ñ–≤)
        r'([A-HJ-NPR-Z0-9]{17})',
        
        # –†—ñ–∫ + –º–∞—Ä–∫–∞ + –º–æ–¥–µ–ª—å
        r'(\d{4}\s*[A-Z][A-Za-z]+\s+[A-Za-z0-9\s]+)',
        
        # –ú–∞—Ä–∫–∞ + –º–æ–¥–µ–ª—å
        r'([A-Z][A-Za-z]+\s+[A-Za-z0-9\s]+(?:MODEL|model)[A-Za-z0-9\s]*)',
    ]
    
    for pattern in car_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            car_info = match.group(1).strip()
            # –û—á–∏—â—É—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            car_info = re.sub(r'\s+', ' ', car_info)
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ: {car_info}")
            return car_info
    
    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ —Å–ª–æ–≤–∞ —Ç–µ–∫—Å—Ç—É
    words = text.split()[:5]
    fallback_info = ' '.join(words)
    logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ: {fallback_info}")
    return fallback_info


def validate_amount(amount_str: str) -> Tuple[bool, Optional[float]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–æ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Å—É–º–∏
    
    Args:
        amount_str: –†—è–¥–æ–∫ –∑ —Å—É–º–æ—é
        
    Returns:
        Tuple[bool, Optional[float]]: (–≤–∞–ª—ñ–¥–Ω–∞, —Å—É–º–∞)
    """
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –∑–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É
        clean_amount = amount_str.strip().replace(',', '.')
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª–∏ –≤–∞–ª—é—Ç —è–∫—â–æ —î
        clean_amount = re.sub(r'[‚Ç¨$]', '', clean_amount)
        
        amount = float(clean_amount)
        
        if amount <= 0:
            logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞: {amount} (–ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0)")
            return False, None
        
        if amount > 1000000:  # –ú–∞–∫—Å–∏–º—É–º 1 –º—ñ–ª—å–π–æ–Ω
            logger.warning(f"–°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞: {amount}")
            return False, None
            
        return True, amount
        
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏: {amount_str}")
        return False, None


def format_currency(amount: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—É–º–∏ —É –≤–∞–ª—é—Ç—ñ
    
    Args:
        amount: –°—É–º–∞
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—É–º–∞
    """
    return f"{amount:.2f} ‚Ç¨"


def format_balance(balance: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    
    Args:
        balance: –ë–∞–ª–∞–Ω—Å
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    """
    if balance > 0:
        return f"üü¢ ‚ûï **+{balance:.2f} ‚Ç¨** (–ø–µ—Ä–µ–ø–ª–∞—Ç–∞)"
    elif balance < 0:
        return f"üî¥ ‚ûñ **{balance:.2f} ‚Ç¨** (–±–æ—Ä–≥)"
    else:
        return f"‚öñÔ∏è ‚ö™ **{balance:.2f} ‚Ç¨** (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ)"


def format_date(date_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —É –∑—Ä—É—á–Ω–∏–π –≤–∏–≥–ª—è–¥
    
    Args:
        date_str: –î–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD, DD.MM.YYYY –∞–±–æ ISO
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞
    """
    try:
        # –û–±—Ä–æ–±–ª—è—î–º–æ ISO —Ñ–æ—Ä–º–∞—Ç –∑ —á–∞—Å–æ–º (2025-07-07T23:21:45.634288+00:00)
        if 'T' in date_str:
            date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        elif '-' in date_str:
            # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            date_obj = datetime.strptime(date_str.split()[0], '%Y-%m-%d')
        else:
            # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
            date_obj = datetime.strptime(date_str, DATE_FORMAT)
        
        return date_obj.strftime(DATE_FORMAT)
        
    except ValueError:
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
        return date_str


def truncate_text(text: str, max_length: int = 100) -> str:
    """
    –û–±—Ä—ñ–∑–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–æ –∑–∞–¥–∞–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä—ñ–∑–∞–Ω–Ω—è
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä—ñ–∑–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."


def sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—â–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –≤—ñ–¥ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    
    Args:
        filename: –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
        
    Returns:
        str: –û—á–∏—â–µ–Ω–∞ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É
    """
    # –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏ –Ω–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
    sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    sanitized = re.sub(r'\s+', '_', sanitized.strip())
    
    return sanitized


def parse_date_from_callback(callback_data: str) -> Optional[str]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏ –∑ callback_data –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        callback_data: –î–∞–Ω—ñ –∑ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        
    Returns:
        Optional[str]: –î–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY –∞–±–æ None
    """
    try:
        # –§–æ—Ä–º–∞—Ç: date_selected_YYYY_MM_DD
        parts = callback_data.split('_')
        if len(parts) >= 4:
            year = int(parts[2])
            month = int(parts[3])
            day = int(parts[4])
            
            date_obj = datetime(year, month, day)
            return date_obj.strftime(DATE_FORMAT)
            
    except (ValueError, IndexError):
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –∑ callback: {callback_data}")
        
    return None


def is_valid_date(date_str: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –¥–∞—Ç–∏
    
    Args:
        date_str: –†—è–¥–æ–∫ –∑ –¥–∞—Ç–æ—é
        
    Returns:
        bool: True —è–∫—â–æ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞
    """
    try:
        datetime.strptime(date_str, DATE_FORMAT)
        return True
    except ValueError:
        return False


def get_operation_emoji(operation_type: str) -> str:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –¥–ª—è —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü—ñ—ó
    
    Args:
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó (invoice/payment)
        
    Returns:
        str: –ï–º–æ–¥–∑—ñ
    """
    return "üìÑ" if operation_type == "invoice" else "üí≥"


def extract_car_model_and_vin(car_info: str) -> tuple:
    """
    –í–∏–¥—ñ–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∞–≤—Ç–æ —Ç–∞ VIN –∫–æ–¥—É –∑ —Ä—è–¥–∫–∞
    
    Args:
        car_info: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ
        
    Returns:
        tuple: (–º–æ–¥–µ–ª—å, VIN)
    """
    if not car_info:
        return "–ù–µ–≤—ñ–¥–æ–º–µ –∞–≤—Ç–æ", ""
    
    # –®—É–∫–∞—î–º–æ VIN (–∑–∞–∑–≤–∏—á–∞–π 17 —Å–∏–º–≤–æ–ª—ñ–≤ –≤ –∫—ñ–Ω—Ü—ñ)
    parts = car_info.split()
    vin = ""
    model = car_info
    
    for part in parts:
        if len(part) == 17 and part.isalnum():  # VIN –∫–æ–¥ —Ç–æ—á–Ω–æ 17 —Å–∏–º–≤–æ–ª—ñ–≤
            vin = part
            model = car_info.replace(part, '').strip()
            break
    
    return model.strip() if model.strip() else "–ù–µ–≤—ñ–¥–æ–º–µ –∞–≤—Ç–æ", vin


def calculate_balance_for_operations(operations: list) -> dict:
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
    
    Args:
        operations: –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π
        
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ {operation_id: balance_after_operation}
    """
    # –°–æ—Ä—Ç—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–≤—ñ–¥ —Å—Ç–∞—Ä—ñ—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö)
    sorted_ops = sorted(operations, key=lambda x: x.get('date', ''), reverse=False)
    
    balance = 0.0
    balance_history = {}
    
    for operation in sorted_ops:
        # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ —Å—É–º—É –æ–ø–µ—Ä–∞—Ü—ñ—ó
        amount = float(operation.get('amount', 0))
        balance += amount
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å –¥–ª—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
        operation_id = f"{operation.get('type', '')}_{operation.get('id', '')}"
        balance_history[operation_id] = balance
    
    return balance_history


def format_operation_summary(operation, balance=None):
    """–§–æ—Ä–º–∞—Ç—É—î –ø—ñ–¥—Å—É–º–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó"""
    try:
        operation_type = operation['type']
        amount = float(operation['amount'])
        date_str = format_date(operation.get('date', ''))
        
        if operation_type == 'payment':
            # –ü–ª–∞—Ç—ñ–∂ - —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            payment_type = operation.get('payment_type', 'balance')
            operation_id = operation.get('id', '')
            
            # –ü–µ—Ä—à–∞ —Å—Ç—Ä–æ–∫–∞: –Ω–æ–º–µ—Ä —Ç–∞ —Å—É–º–∞
            result = f"üü¢ –ü–õ–ê–¢–Ü–ñ #{operation_id} +{amount:.2f}‚Ç¨\n"
            
            # –î—Ä—É–≥–∞ —Å—Ç—Ä–æ–∫–∞: –∑–∞ —â–æ –±—É–ª–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
            if payment_type == 'invoice':
                car_info = operation.get('car_info', '–ù–µ–≤—ñ–¥–æ–º–µ –∞–≤—Ç–æ')
                car_model, vin = extract_car_model_and_vin(car_info)
                if vin:
                    result += f"üéØ –ó–∞ —Ä–∞—Ö—É–Ω–æ–∫: {car_model} | VIN: {vin}\n"
                else:
                    result += f"üéØ –ó–∞ —Ä–∞—Ö—É–Ω–æ–∫: {car_model}\n"
            else:
                result += f"üéØ –ù–∞ –±–∞–ª–∞–Ω—Å\n"
            
            # –¢—Ä–µ—Ç—è —Å—Ç—Ä–æ–∫–∞: –¥–∞—Ç–∞
            result += f"üìÖ {date_str}"
            
            return result
                
        else:  # invoice
            # –†–∞—Ö—É–Ω–æ–∫ - —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            car_info = operation.get('car_info', '')
            car_model, vin = extract_car_model_and_vin(car_info)
            operation_id = operation.get('id', '')
            
            # –ü–µ—Ä—à–∞ —Å—Ç—Ä–æ–∫–∞: –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É —Ç–∞ —Å—É–º–∞
            result = f"üî¥ –†–ê–•–£–ù–û–ö #{operation_id} -{abs(amount):.2f}‚Ç¨\n"
            
            # –î—Ä—É–≥–∞ —Å—Ç—Ä–æ–∫–∞: –º–æ–¥–µ–ª—å —Ç–∞ VIN
            result += f"üöó {car_model} | VIN: {vin}\n"
            
            # –¢—Ä–µ—Ç—è —Å—Ç—Ä–æ–∫–∞: –¥–∞—Ç–∞
            result += f"üìÖ {date_str}"
            
            return result
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó: {e}")
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó: {operation.get('id', '–Ω–µ–≤—ñ–¥–æ–º–æ')}"


def format_single_operation_summary(operation):
    """–§–æ—Ä–º–∞—Ç—É—î –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É –≤ —Å–ø–∏—Å–∫–∞—Ö –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    if operation['type'] == 'payment':
        # –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        text = f"üü¢ –ü–û–ü–û–í–ù–ï–ù–ù–Ø +{operation['amount']:.2f}‚Ç¨\n"
        if operation.get('payment_type') == 'balance':
            text += f"üóìÔ∏è {format_date(operation['date'])} ‚Ä¢ –ù–∞ –±–∞–ª–∞–Ω—Å"
        else:
            # –ü–ª–∞—Ç—ñ–∂ –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫
            car_model, vin = extract_car_model_and_vin(operation.get('car_info', ''))
            text += f"üóìÔ∏è {format_date(operation['date'])} ‚Ä¢ –ó–∞: {car_model}"
    else:
        # –†–∞—Ö—É–Ω–æ–∫
        car_model, vin = extract_car_model_and_vin(operation.get('car_info', ''))
        text = f"üî¥ –†–ê–•–£–ù–û–ö {abs(operation['amount']):.2f}‚Ç¨\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º abs() –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º
        text += f"üöó {car_model}\n"
        text += f"üÜî VIN: {vin}\n"
        text += f"üóìÔ∏è {format_date(operation['date'])}"
    
    return text 