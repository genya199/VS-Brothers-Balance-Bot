from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import calendar
from config import MAIN_MENU_BUTTONS, MONTHS_UA, WEEKDAYS_UA


def get_main_menu() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É –¥–≤–∞ —Ä—è–¥–∏
    builder.add(
        InlineKeyboardButton(
            text=MAIN_MENU_BUTTONS['new_invoice'],
            callback_data="menu_add_invoice"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text=MAIN_MENU_BUTTONS['payment'],
            callback_data="menu_add_payment"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text=MAIN_MENU_BUTTONS['balance'],
            callback_data="menu_balance"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text=MAIN_MENU_BUTTONS['history'],
            callback_data="menu_history"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text=MAIN_MENU_BUTTONS['export'],
            callback_data="menu_export"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó",
            callback_data="delete_operations_menu"
        )
    )
    
    # –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏: 2-2-2
    builder.adjust(2, 2, 2)
    
    return builder.as_markup()


def get_back_to_menu() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    )
    return builder.as_markup()


def get_calendar(year: int = None, month: int = None) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
    
    Args:
        year: –†—ñ–∫ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–∏–π)
        month: –ú—ñ—Å—è—Ü—å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–∏–π)
        
    Returns:
        InlineKeyboardMarkup: –ö–∞–ª–µ–Ω–¥–∞—Ä
    """
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month
    
    builder = InlineKeyboardBuilder()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –º—ñ—Å—è—Ü–µ–º —Ç–∞ —Ä–æ–∫–æ–º
    builder.add(
        InlineKeyboardButton(
            text=f"{MONTHS_UA[month-1]} {year}",
            callback_data="ignore"
        )
    )
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    prev_month = month - 1
    prev_year = year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
    
    next_month = month + 1
    next_year = year
    if next_month == 13:
        next_month = 1
        next_year += 1
    
    builder.add(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"calendar_prev_{prev_year}_{prev_month}"
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=f"calendar_next_{next_year}_{next_month}"
        )
    )
    builder.adjust(2)
    
    # –î–Ω—ñ —Ç–∏–∂–Ω—è
    for day in WEEKDAYS_UA:
        builder.add(
            InlineKeyboardButton(
                text=day,
                callback_data="ignore"
            )
        )
    builder.adjust(7)
    
    # –î–Ω—ñ –º—ñ—Å—è—Ü—è
    cal = calendar.monthcalendar(year, month)
    
    for week in cal:
        week_buttons = []
        for day in week:
            if day == 0:
                # –ü–æ—Ä–æ–∂–Ω—ñ–π –¥–µ–Ω—å
                week_buttons.append(
                    InlineKeyboardButton(
                        text=" ",
                        callback_data="ignore"
                    )
                )
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
                is_today = (day == now.day and month == now.month and year == now.year)
                day_text = f"[{day}]" if is_today else str(day)
                
                week_buttons.append(
                    InlineKeyboardButton(
                        text=day_text,
                        callback_data=f"date_selected_{year}_{month:02d}_{day:02d}"
                    )
                )
        
        builder.row(*week_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–°—å–æ–≥–æ–¥–Ω—ñ"
    today_date = now.strftime("%Y_%m_%d")
    builder.add(
        InlineKeyboardButton(
            text="üìÖ –°—å–æ–≥–æ–¥–Ω—ñ",
            callback_data=f"date_selected_{today_date}"
        )
    )
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.add(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(1)
    
    return builder.as_markup()


def get_confirm_keyboard(action: str, data: str = "") -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó
    
    Args:
        action: –¢–∏–ø –¥—ñ—ó –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(
            text="‚úÖ –¢–∞–∫",
            callback_data=f"confirm_{action}_{data}"
        ),
        InlineKeyboardButton(
            text="‚ùå –ù—ñ",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(2)
    
    return builder.as_markup()


def get_invoice_selection_keyboard(invoices: list) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏
    
    Args:
        invoices: –°–ø–∏—Å–æ–∫ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    if not invoices:
        # –Ø–∫—â–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –Ω–µ–º–∞—î
        builder.add(
            InlineKeyboardButton(
                text="üö´ –ù–µ–º–∞—î —Ä–∞—Ö—É–Ω–∫—ñ–≤",
                callback_data="ignore"
            )
        )
    else:
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
        for invoice in invoices[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 10 —Ä–∞—Ö—É–Ω–∫—ñ–≤
            builder.add(
                InlineKeyboardButton(
                    text=f"üìÑ {invoice['display_text']}",
                    callback_data=f"select_invoice_{invoice['id']}"
                )
            )
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞ –±–∞–ª–∞–Ω—Å" 
    builder.add(
        InlineKeyboardButton(
            text="üí∞ –ü–ª–∞—Ç—ñ–∂ –Ω–∞ –±–∞–ª–∞–Ω—Å",
            callback_data="select_invoice_balance"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.add(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_menu"
        )
    )
    
    # –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    builder.adjust(1)
    
    return builder.as_markup()


def get_operations_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(
            text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(1)
    
    return builder.as_markup()


def get_history_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ–ø–µ—Ä–∞—Ü—ñ–π
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(
            text="üì§ –ï–∫—Å–ø–æ—Ä—Ç",
            callback_data="menu_export"
        )
    )
    builder.adjust(1)
    
    builder.add(
        InlineKeyboardButton(
            text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(1)
    
    return builder.as_markup()


def get_amount_confirmation_keyboard(amount: float) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—É–º–∏
    
    Args:
        amount: –°—É–º–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—É–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(
            text=f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ {amount:.2f} —î–≤—Ä–æ",
            callback_data=f"confirm_amount_{amount}"
        )
    )
    builder.adjust(1)
    
    builder.add(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É",
            callback_data="change_amount"
        ),
        InlineKeyboardButton(
            text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(2)
    
    return builder.as_markup()


def get_export_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –µ–∫—Å–ø–æ—Ä—Ç—É
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(
            text="üìã –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª",
            callback_data="export_text"
        )
    )
    builder.adjust(1)
    
    builder.add(
        InlineKeyboardButton(
            text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(1)
    
    return builder.as_markup()





def get_operations_list_keyboard(operations: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    
    Args:
        operations: –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π
        page: –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        total_pages: –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑—ñ —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü—ñ–π
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
    for operation in operations:
        if operation['type'] == 'invoice':
            from utils import extract_car_model_and_vin, format_date
            
            car_info = operation.get('car_info', '–ù–µ–≤—ñ–¥–æ–º–µ –∞–≤—Ç–æ')
            model, vin = extract_car_model_and_vin(car_info)
            date = format_date(operation.get('date', ''))
            
            # –ö–æ–ª—å–æ—Ä–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: —á–µ—Ä–≤–æ–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–∞—Ö—É–Ω–∫—ñ–≤
            if model and model != '–ù–µ–≤—ñ–¥–æ–º–µ –∞–≤—Ç–æ':
                # –í–∏–¥—ñ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å (–±–µ–∑ —Ä–æ–∫—É)
                clean_model = model.replace('2017', '').replace('2018', '').replace('2019', '').replace('2020', '').replace('2021', '').replace('2022', '').replace('2023', '').replace('2024', '').replace('2025', '').strip()
                model_short = clean_model[:12]  # –ö–æ—Ä–æ—Ç—à–µ –¥–ª—è VIN —Ç–∞ –¥–∞—Ç–∏
                
                if vin:
                    vin_short = vin[-6:]  # –û—Å—Ç–∞–Ω–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤ VIN
                    text = f"üî¥ -{operation['amount']:.0f}‚Ç¨ | {model_short} | ...{vin_short} | {date}"
                else:
                    text = f"üî¥ -{operation['amount']:.0f}‚Ç¨ | {model_short} | {date}"
            else:
                text = f"üî¥ -{operation['amount']:.0f}‚Ç¨ | –ù–µ–≤—ñ–¥–æ–º–µ –∞–≤—Ç–æ | {date}"
        else:
            from utils import extract_car_model_and_vin, format_date
            
            date = format_date(operation.get('date', ''))
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–ª–∞—Ç–µ–∂—É
            if operation.get('invoice_id') and operation.get('invoice_car_info'):
                # –ü–ª–∞—Ç—ñ–∂ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
                car_info = operation['invoice_car_info']
                model, vin = extract_car_model_and_vin(car_info)
                
                if model and model != '–ù–µ–≤—ñ–¥–æ–º–µ –∞–≤—Ç–æ':
                    # –í–∏–¥—ñ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å
                    clean_model = model.replace('2017', '').replace('2018', '').replace('2019', '').replace('2020', '').replace('2021', '').replace('2022', '').replace('2023', '').replace('2024', '').replace('2025', '').strip()
                    model_short = clean_model[:10]  # –©–µ –∫–æ—Ä–æ—Ç—à–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤
                    
                    if vin:
                        vin_short = vin[-4:]  # –û—Å—Ç–∞–Ω–Ω—ñ 4 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è
                        text = f"üü¢ +{operation['amount']:.0f}‚Ç¨ | {model_short} | ...{vin_short} | {date}"
                    else:
                        text = f"üü¢ +{operation['amount']:.0f}‚Ç¨ | –ó–∞ {model_short} | {date}"
                else:
                    text = f"üü¢ +{operation['amount']:.0f}‚Ç¨ | –ó–∞ —Ä–∞—Ö—É–Ω–æ–∫ | {date}"
            else:
                # –ü–ª–∞—Ç—ñ–∂ –Ω–∞ –±–∞–ª–∞–Ω—Å
                text = f"üü¢ +{operation['amount']:.0f}‚Ç¨ | –ù–∞ –±–∞–ª–∞–Ω—Å | {date}"
        
        builder.add(
            InlineKeyboardButton(
                text=text,
                callback_data=f"delete_{operation['type']}_{operation['id']}"
            )
        )
    
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è",
                callback_data=f"delete_page_{page - 1}"
            )
        )
    
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞",
                callback_data=f"delete_page_{page + 1}"
            )
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if total_pages > 1:
        builder.add(
            InlineKeyboardButton(
                text=f"üìÑ {page}/{total_pages}",
                callback_data="ignore"
            )
        )
        builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.add(
        InlineKeyboardButton(
            text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(1)
    
    return builder.as_markup()


def get_delete_confirmation_keyboard(operation_type: str, operation_id: int) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
    
    Args:
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó ('invoice' –∞–±–æ 'payment')
        operation_id: ID –æ–ø–µ—Ä–∞—Ü—ñ—ó
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(
            text="üóëÔ∏è –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏",
            callback_data=f"confirm_delete_{operation_type}_{operation_id}"
        ),
        InlineKeyboardButton(
            text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
            callback_data="delete_operations_menu"
        )
    )
    builder.adjust(2)
    
    return builder.as_markup() 